
# TODO: support other emitters, this is really a BasicCLIEmitter
class Emitter:

    @classmethod
    def spec_converters_array(cls, spec_converters):
        return f"[{', '.join(spec_converters)}]"

    @classmethod
    def build_imports(cls, spec_converters, spec_types):
        imports = []

        if "Script Task" in spec_types:
            imports.append("from SpiffWorkflow.bpmn.PythonScriptEngine import PythonScriptEngine")

        imports.append("from SpiffWorkflow.bpmn.serializer.workflow import BpmnWorkflowSerializer")

        for spec_converter in spec_converters:
            imports.append(f"from SpiffWorkflow.spiff.serializer.task_spec_converters import {spec_converter}")

        return imports

    @classmethod
    def build_task_handlers(cls, grouped_task_metadata):
        task_handlers = []
        task_handler_map = {}
        if "manual" in grouped_task_metadata:
            task_handlers.append("""
    def handle_manual_task(props):
        def _handler(task):
            print(f"WTF: {props['instructionsForEndUser']}")
        return _handler""")

            for metadata in grouped_task_metadata["manual"]:
                task_handler_map[metadata[0]] = ("handle_manual_task", metadata[1])

        #task_handlers.append(f"TASK_HANDLERS = {task_handler_map}")

        return task_handlers

    @classmethod
    def emit(cls, 
        class_name, 
        serialized_workflow, 
        serializer_version, 
        spec_converters, 
        spec_types,
        grouped_task_metadata, 
        output_filename
    ):
        imports = cls.build_imports(spec_converters, spec_types)
        sc_array = cls.spec_converters_array(spec_converters)

        output = ["# GENERATED by Supreme Spoon", ""]
        output += imports

        # TODO: break this out more so we can get more granular based on individual workflows
        output += [f"""

class {class_name}:
    def __init__(self, scripting_additions=None):
        self.scripting_additions = scripting_additions"""]

        output += cls.build_task_handlers(grouped_task_metadata)

        output += [f"""
    def get_serializer(self):
        spec_converters = {sc_array}
        spec_converter = BpmnWorkflowSerializer.configure_workflow_spec_converter(spec_converters)
        serializer = BpmnWorkflowSerializer(spec_converter, version="{serializer_version}")
        return serializer

    # TODO: restore
    def get_workflow(self):
        workflow = self.get_serializer().workflow_from_dict(self.SERIALIZED_WORKFLOW)

        if self.scripting_additions is not None:
            workflow.script_engine = PythonScriptEngine(scripting_additions=self.scripting_additions)

        return workflow

    def run(self):
        workflow = self.get_workflow()
        workflow.do_engine_steps()
        while not workflow.is_completed():
            ready_tasks = workflow.get_ready_user_tasks()
            for task in ready_tasks:
                task.complete()
            workflow.refresh_waiting_tasks()
            workflow.do_engine_steps()

        return workflow.data

    SERIALIZED_WORKFLOW = {serialized_workflow}
"""
        ]

        with open(output_filename, "w") as f:
            f.write("\n".join(output))
