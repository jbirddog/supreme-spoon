
class Emitter:

    @classmethod
    def spec_converter_imports(cls, spec_converters):
        def build_import(sc):
            return f"from SpiffWorkflow.spiff.serializer.task_spec_converters import {sc}"

        return "\n".join(map(build_import, spec_converters))

    @classmethod
    def spec_converters_array(cls, spec_converters):
        return f"[{', '.join(spec_converters)}]"

    @classmethod
    def emit(cls, class_name, serialized, serializer_version, spec_converters, output_filename):
        sc_imports = cls.spec_converter_imports(spec_converters)
        sc_array = cls.spec_converters_array(spec_converters)
        with open(output_filename, "w") as f:
            f.write(f"""# GENERATED by Supreme Spoon

from SpiffWorkflow.bpmn.serializer.workflow import BpmnWorkflowSerializer
{sc_imports}


class {class_name}:
    def get_serializer(self):
        spec_converters = {sc_array}
        spec_converter = BpmnWorkflowSerializer.configure_workflow_spec_converter(spec_converters)
        serializer = BpmnWorkflowSerializer(spec_converter, version="{serializer_version}")
        return serializer

    # TODO: restore
    def get_workflow(self):
        workflow = self.get_serializer().workflow_from_dict(self.SERIALIZED)

    def run(self):
        workflow = self.get_workflow()
        workflow.do_engine_steps()
        while not workflow.is_completed():
            ready_tasks = workflow.get_ready_user_tasks()
            for task in ready_tasks:
                task.complete()
            workflow.refresh_waiting_tasks()
            workflow.do_engine_steps()

        return workflow.data

    SERIALIZED = {serialized}
""")
