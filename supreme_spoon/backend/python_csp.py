from util import by_id

class PythonCSPBackend:
    @classmethod
    def _csp(self, kinda_ast):
        def preamble():
            # TODO only build preamble with what is needed by the workflow
            # TODO break these code snippets out
            return """
# GENERATED BY supreme-spoon

#
# This is an early POC to demonstrate compiling BPMN diagrams to a static Python file.
#

#
# Example runtime
#

identity = lambda x: x

def fan_out(ks):
    def impl(data):
        results = [k(data) for k in ks]
        for result in results:
            if result is not None:
                return result
    return impl

#
# Example bpmn element implementations
#

def end_event(id, config, k):
    def impl(data):
        print(f"In end_event: {id}")
        return k(data)
    return impl

pg_instances = {}
def parallel_gateway(id, config, k):
    def make():
        expected_in = len(list(filter(lambda c: c[0] == 'incoming', config)))
        conds = {"let_in": 0}

        def impl(data):
            assert conds["let_in"] < expected_in
            conds["let_in"] += 1
            if conds["let_in"] != expected_in:
                return None
            print(f"In parallel_gateway: {id}")
            return k(data)
        return impl
    if id not in pg_instances:
        pg_instances[id] = make()
    return pg_instances[id]

def script_task(id, config, k):
    script = list(filter(lambda c: c[0] == 'script', config))[0][2]
    def impl(data):
        print(f"In script_task: {id} - {script}")
        data[f"result_{id}"] = f"TODO_EVAL({script})"
        return k(data)
    return impl

def start_event(id, config, k):
    def impl(data):
        print(f"In start_event: {id}")
        return k(data)
    return impl
"""

        def main(process_id, csp):
            return f"""
if __name__ == "__main__":
    print("Running '{process_id}'...")

    #
    # Workflow expressed in CSP style. Would allow starting from/resuming at any point
    #
    workflow = {csp}
    
    result = workflow({{}})
    print(f"result: {{result}}")
"""
        steps = kinda_ast[0][2]
        start_event = list(filter(lambda n: n[0] == "startEvent", steps))[0]
        steps_by_id = by_id(steps)

        func_map = {
            "endEvent": "end_event",
            "parallelGateway": "parallel_gateway",
            "scriptTask": "script_task",
            "startEvent": "start_event",
        }

        def outgoing(step):
            return list(filter(lambda n: n[0] == "outgoing", step[2]))

        def form_csp(step):
            f = func_map[step[0]]
            id = step[1]["id"]
            config = step[2]
            outgoing_steps = map(lambda s: steps_by_id[s[2]], outgoing(step))
            ks = list(map(form_csp, outgoing_steps))
            ks_len = len(ks)
            if ks_len == 0:
                k = "identity"
            elif ks_len > 1:
                k = f"fan_out([{', '.join(ks)}])"
            else:
                k = ks[0]
            csp = f"{f}(\"{id}\", {config}, {k})"
            return csp

        csp = form_csp(start_event)
        process_id = kinda_ast[0][1]["id"]
        prog = "\n".join([preamble(), main(process_id, csp)])

        return prog

    @classmethod
    def emit(self, kinda_ast):
        return self._csp(kinda_ast)
