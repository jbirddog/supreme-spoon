
# GENERATED BY supreme-spoon

#
# This is an early POC to demonstrate compiling BPMN diagrams to a static Python file.
#

#
# Example runtime
#

def configs_named(config, name):
    return list(filter(lambda c: c[0] == name, config))

def config_named(config, name):
    return configs_named(config, name)[0]

def config_value_named(config, name):
    return config_named(config, name)[2]

def ext_named(config, ext_name):
    ext_elems = config_named(config, 'extensionElements')
    return configs_named(ext_elems[2], ext_name)[0]

def ext_value_named(config, ext_name):
    return ext_named(config, ext_name)[2]

def fan_out(ks):
    def impl(data):
        results = [k(data) for k in ks]
        for result in results:
            if result is not None:
                return result
    return impl

def end_k(data):
    print("Complete!")
    print(f"data: {data}")


#
# Example bpmn element implementations
#

def end_event(id, config, k):
    def impl(data):
        print(f"In end_event: {id}")
        k(data)
    return impl

def manual_task(id, config, k):
    import os
    prompt = ext_value_named(config, 'instructionsForEndUser')
    def impl(data):
        print(f"In manual_task: {id}")
        input(prompt)
        print(config)
        k(data)
    return impl

pg_instances = {}
def parallel_gateway(id, config, k):
    def make():
        expected_in = len(configs_named(config, 'incoming'))
        conds = {"let_in": 0}

        def impl(data):
            assert conds["let_in"] < expected_in
            conds["let_in"] += 1
            if conds["let_in"] == expected_in:
                print(f"In parallel_gateway: {id}")
                k(data)
        return impl
    if id not in pg_instances:
        pg_instances[id] = make()
    return pg_instances[id]

def script_task(id, config, k):
    script = config_value_named(config, 'script')
    def impl(data):
        print(f"In script_task: {id} - {script}")
        data[f"result_{id}"] = f"TODO_EVAL({script})"
        k(data)
    return impl

def start_event(id, config, k):
    def impl(data):
        print(f"In start_event: {id}")
        k(data)
    return impl


steps = {}
__k = lambda id: steps[id]

steps["EndEvent_0q4qzl9"] = end_event("EndEvent_0q4qzl9", [('incoming', {}, 'StartEvent_1')], end_k)
steps["StartEvent_1"] = start_event("StartEvent_1", [('outgoing', {}, 'EndEvent_0q4qzl9')], __k("EndEvent_0q4qzl9"))



#
# Workflow expressed in CPS style. Would allow starting from/resuming at any point
#
workflow = steps["StartEvent_1"]

if __name__ == "__main__":
    print("Running 'empty_workflow'...")
    
    workflow({})
